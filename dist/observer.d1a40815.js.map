{"version":3,"sources":["typescript/observer/index.ts"],"names":[],"mappings":"AASA;AACA,IAAA,YAAA;AAAA;AAAA,YAAA;AAGC,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AAFA,SAAA,SAAA,GAAwB,EAAxB;AAGC,QAAM,EAAE,GAAqB,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAA7B;;AACA,QAAI,EAAJ,EAAQ;AACP,MAAA,EAAE,CAAC,gBAAH,CAAoB,OAApB,EAA6B,YAAA;AAC5B,QAAA,KAAI,CAAC,MAAL,CAAY,EAAE,CAAC,KAAf,EAD4B,CACL;;AACvB,OAFD;AAGA;AACD;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,QAAV,EAA4B;AAC3B,SAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACA,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAA8B;AAC7B,QAAM,KAAK,GAAG,KAAK,SAAL,CAAe,SAAf,CAAyB,UAAC,GAAD,EAAI;AAC1C,aAAO,GAAG,KAAK,QAAf;AACA,KAFa,CAAd;AAGA,SAAK,SAAL,CAAe,MAAf,CAAsB,KAAtB,EAA6B,CAA7B;AACA,GALD,CAhBD,CAuBC;;;AACA,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;AACf,SAAK,SAAL,CAAe,OAAf,CAAuB,UAAC,QAAD,EAAS;AAAK,aAAA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CAAA;AAAqB,KAA1D;AACA,GAFD;;AAGD,SAAA,YAAA;AA3BA,CAAA,EAAA;;AA6BA,IAAA,YAAA;AAAA;AAAA,YAAA;AAGC,WAAA,YAAA,GAAA;AACC,SAAK,EAAL,GAAU,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAV;AACA,GALF,CAOC;;;AACA,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;AACf,SAAK,EAAL,CAAQ,SAAR,GAAoB,IAApB;AACA,GAFD;;AAGD,SAAA,YAAA;AAXA,CAAA,EAAA,EAaA;;;AACA,IAAM,KAAK,GAAG,IAAI,YAAJ,EAAd;AACA,IAAM,OAAO,GAAG,IAAI,YAAJ,EAAhB;AAEA,KAAK,CAAC,SAAN,CAAgB,OAAhB,GAA0B;;AAE1B,UAAU,CAAC,YAAA;AAAM,SAAA,KAAK,CAAC,WAAN,CAAkB,OAAlB,CAAA;AAA0B,CAAjC,EAAmC,IAAnC,CAAV","file":"observer.d1a40815.js","sourceRoot":"..","sourcesContent":["interface Observer {\r\n\tupdate: (data: any) => void;\r\n}\r\n\r\ninterface Subject {\r\n\tsubscribe: (observer: Observer) => void;\r\n\tunsubscribe: (observer: Observer) => void;\r\n}\r\n\r\n// va a recibir los cambios del precio del BC y les va a informar a sus observadores\r\nclass BitcoinPrice implements Subject {\r\n\tobservers: Observer[] = [];\r\n\r\n\tconstructor() {\r\n\t\tconst el: HTMLInputElement = document.querySelector('#value');\r\n\t\tif (el) {\r\n\t\t\tel.addEventListener('input', () => {\r\n\t\t\t\tthis.notify(el.value); // cuando cambie el input notificamos al los observadores\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tsubscribe(observer: Observer) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\tunsubscribe(observer: Observer) {\r\n\t\tconst index = this.observers.findIndex((obs) => {\r\n\t\t\treturn obs === observer;\r\n\t\t});\r\n\t\tthis.observers.splice(index, 1);\r\n\t}\r\n\r\n\t// cuando el precio cambie queremos notificar a los observadores\r\n\tnotify(data: any) {\r\n\t\tthis.observers.forEach((observer) => observer.update(data));\r\n\t}\r\n}\r\n\r\nclass PriceDisplay implements Observer {\r\n\tprivate el: HTMLElement;\r\n\r\n\tconstructor() {\r\n\t\tthis.el = document.querySelector('#price');\r\n\t}\r\n\r\n\t// cada vez que el sujeto notifica a este observador modificamos el valor\r\n\tupdate(data: any) {\r\n\t\tthis.el.innerText = data;\r\n\t}\r\n}\r\n\r\n// instancias para suscribirnos al sujeto\r\nconst value = new BitcoinPrice();\r\nconst display = new PriceDisplay();\r\n\r\nvalue.subscribe(display); // display esta suscrito a todos los cambios que notifica el sujeto (input)\r\n\r\nsetTimeout(() => value.unsubscribe(display), 5000);\r\n"]}